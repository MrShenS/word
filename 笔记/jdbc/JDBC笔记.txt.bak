DB：Oracle Database，DB

API：Application Programming Interface

API docs：API说明文档

RDBMS：Relational Database Management System，关系型数据库管理系统

JDBC：Java Database Connectivity

SQL：
	1.Standard Query Language：标准查询语言
	2.Structured Query Language：结构化查询语言

RDB：Relational Database

目标：
	1.使用Java语言操作数据库
	2.Java对象和数据库表的互操作


	s_emp	===>	员工信息
	id	name salary

	students  ===>  学生信息
	sid name age

	class Student{
		private int sid;
		String name;
		int age;

		public int getSid(){
			return sid;
		}
	}

	项目流程：
		1.数据库设计
		2.实体类设计
		...

ODBC：Open Database Connectivity，开放式数据库连接技术。基于C语言提供了操作数据库的标准和访问数据元数据的方式。 （c语言开发）

JDBC：Java Database Connectivity，Java连接数据库的方式，使用Java语言对ODBC的实现。

java包：包含了最基本的JDK相关的API；
javax包：x，Extended，JDK的API进行了扩展。
jabc驱动：java语言和数据库进行通信的中间件

JDBC相关的类和接口：
	1.java.sql.Driver：接口，使用Java语言连接关系型数据库的驱动接口；不同的数据库对该接口有不同的实现。

	2.java.sql.DriverManager：类，该类主要用于管理众多的JDBC驱动，并且该类在调用相关方法时可以连接至数据库并产生Connection对象。

	3.java.sql.Connection：接口，当DriverManager使用合适的驱动成功的连接至数据库之后，会返回给应用程序该类的对象；该类可以通过调用相关方法产生Statement对象。

	4.java.sql.Statement：接口，该接口主要用于执行SQL语句。
		PreparedStatement：能够执行批处理。
		CallableStatement：能够执行存储过程【存储过程就是在数据库开发中所编写的函数】。

	5.java.sql.ResultSet：接口，该接口的实现类对象用于存储查询语句查询到的结果集。
	6.types[类]   数据库数据的类型

URL：Universal Resource Location，统一资源定位符
	http://www.baidu.com/index.html

URI：Universal Resource Identity，统一资源标识符

连接JDBC的URL的语法：
	1.Oracle Database：
		jdbc:oracle:thin:@IP:port:数据库名
		数据库名：由人为定义的，但是如果是按照默认方式安装的数据库，有两种，XE，ORCL。

		查询数据库名：Win+R --> services.msc

	2.MySQL Database：
		jdbc:mysql://IP:port/数据库名

JDBC：Java Database Connectivity：Java数据库连接技术

ODBC：Open Database Connectivity：开放式数据库连接技术，微软用C开发

RDBMS：Relational Database Management System，关系型数据库管理系统
	RDB+SQL+管理软件=RDBMS

JDBC驱动：Java语言和数据库进行通信的中间件

JDBC操作相关的类和接口：java.sql.*;
	Drvier，DriverManager[类]，Connection，Statement->PreparedStatement->CallableStatement，ResultSet，DatabaseMetaData，ResultSetMetaData，Types[类]

java.util.Properties：主要用于存储应用程序的配置信息；数据是K，V成对的形式；底层实现是Map集合。
	void setProperty("k","v");
	String getProperty("k");

JDBC操作数据库的六大步骤：
	1.注册驱动：驱动的本质是Java的一个类，该驱动类里面封装了进行数据库连接的相关方法。如果要调用该类中的方法，要创建该类的对象。
		三种注册驱动的方式；
		1.使用类加载的形式注册驱动：
			Class.forName("类全名"); // ClassNotFoundException
			本质是：JDBC相关的程序内部会使用该类的类全名利用反射技术创建该类的对象，用以执行/调用该驱动类中的进行数据库连接的相关方法。

		2.直接创建相关驱动类的对象，然后使用DriverManager中的registerDriver方法进行驱动注册。
			import java.sql.Driver;
			import oracle.jdbc.OracleDriver;

			// 父接口引用指向子实现类对象，多态 
			Driver driver=new OracleDriver();
			// 注册驱动
			DriverManager.registerDriver(driver);

		3.通过进行系统属性配置的形式注册驱动，本质和第一种没有区别。
			System.setProperty("jdbc.drivers","类全名");

		4.命令行参数指定：
			java -cp bin:ojdbc.jar x.y.z.Test -Djdbc.drivers=驱动类的类全名

	2.获取连接Connection对象：形成Java程序【客户端】和数据库【服务器端】的通信通道，会话，Session；进行获取连接的两种方式：
		1.使用DriverManager调用getConnection方法，传递url，user，password三个参数，本质就是相关的驱动类的对象调用connect方法；getConnection方法一共有三个重载的方法；
			String url="jdbc:oracle:thin:@127.0.0.1:1521:XE";
			1.DriverManager.getConnection(String url,String user,String password); // 常用，通用

			String url="jdbc:oracle:thin:@127.0.0.1:1521:XE";
			2.DriverManager.getConnection(String url,Properties info);

			String orclUrl="jdbc:oracle:thin:@127.0.0.1:1521:XE";
			String msqUrl="jdbc:mysql://127.0.0.1:3306/数据库名?user=system&password=root";
			3.DriverManager.getConnection(String url); // 不适用于Oracle数据库，但是适用于MySQL等数据库。

		2.直接使用相关驱动类的对象调用该驱动类中的connect方法即可。
			import java.sql.Driver;
			import oracle.jdbc.OracleDriver;

			Driver driver=new OracleDriver();
			Connection conn=driver.connect(url,info);

	3.获取Statement对象
	4.执行SQL语句：
		DDL：Data Definition Language，数据定义语言；
		DML：Data Multipulation Language，数据操纵语言；
		DQL：Data Query Language，数据查询语言；
		DCL：Data Control Language，数据控制语言；grant，invoke
		TCL：Transaction Control Language，事务控制语言；

		几乎所有的SQL语句都能被下面三个方法中的任意一个来执行，根据不同的需求使用不同的方法；

		boolean execute(String sql);    // 用于执行DDL
		返回值代表的是该SQL语句是否执行失败，表是该SQL语句执行是否出错。
			
		int executeUpdate(String sql);  // 用于执行DML
		返回值代表的是该SQL语句执行之后，对数据库表中的多少行数据产生了影响。
		insert into s_emp(id,last_name,salary) 
			values(26,'zs',1000),(27,'ls',1000),(28,'ww',1000);

		ResultSet executeQuery(String sql);  // 用于执行DQL
		该方法的返回值是将SQL语句执行之后的虚拟表/临时表进行了封装；
                                可以通过调用ResultSet类中的各种get方法获取相对应的值，调用的get方法和查询结果的数据类型有关；

	5.处理结果集，只有执行查询SQL语句
		涉及到结果集的遍历；
		1.判断该结果集中是否有下一条记录；
			boolean resultSet.next(); 该方法的返回值是布尔类型，true表示有下一条记录，false表示没有下一条记录；
                                                                                         会将“指针”下移；

		2.当next方法的返回值为true的时候，可以通过相应的get方法获取到每一列的值；
			在调用ResultSet中的get方法是，每种数据类型都对应两个get方法：
				rs.getInt(int cnum); // cnum表示该列的索引
				rs.getInt(String cname); // cname表示该列的字段名

	6.关闭连接：主要目的是释放资源，将对象置null。
		// Connection --> Statement --> ResultSet
		resultSet.close();
		statement.close();
		connection.close();
	
		注意：
			1.在执行JDBC操作的时候，产生的异常一般不抛出，而是使用try...catch捕获处理。
			2.如果上述三个对象已经为null，就不需要关闭了；所以在关闭资源的时候需要判断该对象是否为null。
			JDBC操作数据库的六大步骤：
1.注册驱动
	1.类加载形式注册驱动
		Class.forName("驱动类全名");
	2.直接创建相关驱动类的对象
		Driver driver=new OracleDriver();
	3.同过系统属性配置的形式
		System.setProperty("jdbc.drivers","驱动类全名");

2.获取连接Connection对象
	1.DriverManager调用静态方法：
		1.getConnection(url);		// 不适用于Oracle数据库
		2.getConnection(url,info);
		3.getConnection(url,user,password);
	2.使用相关驱动类的对象调用方法：
		Driver driver=new OracleDriver();
		driver.connect(url,info);

3.获取Statement对象
	conn.createStatement();

4.执行SQL语句
	1.执行DDL：create alter drop rename
		boolean execute(String sql);
		返回值代表：该SQL语句执行是否失败/出错。

	2.执行DML：insert update delete
		int executeUpdate(String sql);
		返回值代表：该SQL语句执行后影响了数据库表中数据的条数。

	3.执行DQL：select
		ResultSet executeQuery(String sql);
		返回值代表：该SQL执行的结果（临时表）被封装成了ResultSet对象；在Java代码中可以通过该对象获取到查询出来每一条记录。
		
5.处理结果集
	1.判断结果集对象中是否有下一条记录；
	2.如果有，则通过各种get方法来获取数据。
		number		-->		getInt(),getDouble(),getLong(),getFloat()
		varchar2	-->		getString()

6.关闭连接
	1.关闭顺序：
		对象产生顺序：Connection -> Statement -> ResultSet
		对象关闭顺序：ResultSet -> Statement -> Connection

	2.如果该对象不为null，才做关闭操作；如果为null，则不关闭。

	3.在释放资源是，只能一个一个地关，不能放在一起关闭。

CRUD：Create、Retrieve、Update、Delete

Statement和PreparedStatement：
PreparedStatement：能够进行SQL语句的批处理操作和防止SQL注入攻击。

区别：
	1.PreparedStatement比Statement安全；
	2.PreparedStatement比Statement效率高；
	3.PreparedStatement的代码可读性较强。

JDBC中的封装：
	1.JDBC相同的代码抽取进行封装：
		1.将相同的代码抽取出来之后封住成方法。
		2.对于代码中的一些字符串数据一般是提供配置文件；

	2.将数据库中查询到的数据封装成相关对象：
		需求：
			1.创建students表，三个字段：
				sid number pk，
				name varchar2(20)，
				birth date
			2.创建Student类，有三个成员变量：
				int sid，
				String name，
				Date birth。
			3.创建多个Student类的对象，将其存储至数据库表students中。
			4.从数据库表students中查询所有数据，将每一条数据封装成一个学生对象，存储值集合【List】中。
		
		注意：
			1.在Java中有两种Date:
				1.java.util.Date：主要用于Java编程。
				2.java.sql.Date：主要用于数据库。

			2.两种Date的转换：
				1.uDate->sDate
					java.util.Date uDate=new j.u.Date();

					Long time=uDate.getTime();

					j.s.Date sDate=new j.s.Date(time);

				2.sDate->uDate
					j.s.Date sDate=new j.s.Date(10);

					Long time=sDate.getTime();

					j.u.Date uDate=new j.u.Date(time);

			3.将一个格式的时间字符串转化成Date对象；
				"1990-01-01"->j.u.Date

				SimpleDateFormat


JDBC中的事务：
	0.JDBC中的事务是通过Connection对象控制的；
	1.JDBC中的事务默认是自动提交的；
	2.如果需要手动提交事务，则需要将默认的事务提交方式（自动提交）关闭，connection.setAutoCommit(false);
	3.当执行connection.close()操作的时候，默认会提交事务。
	4.为了保证事务的原子性，在发生异常的时候需要事务回滚，connection.rollback();





























