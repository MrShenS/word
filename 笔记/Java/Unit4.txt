第四章：Array，数组
目标：
	1.数组的定义
	2.数组的初始化
	3.数组的长度（元素的个数）
	4.多维数组的定义和使用
	5.可变长参数列表

1.什么是数组？
	数组是一些数据类型相同的数据的集合。在Java中，数组也是一种对象，但是没有相应的类与之对应。

	可以将数组想象成是一个容器，在该容器中存放着很多的类型相同的数据。

	元素：把数组中的每一个个体（数据）叫元素。
		  例如：可以将教室看成是Student类型的数组，该数组中有N多的Student对象，每个Student对象称之为元素。

	数组的长度：把数组中所能容纳的所有元素的个数称之为数组长度。在 数组对象中有一个属性叫length，
	                      该属性保存了数组的长度，访问方式：数组名.length。

2.数组的定义（声明和初始化）
	语法：
		数据类型[] 数组名=数组的初始化语句;

	具体定义，以创建一个int类型的数组为例：
		int[] nums=new int[10]; // 常用写法
		int nums[]=new int[10];

	说明：创建了一个int类型的数组名叫nums，在该数组中只能存放int类型的数据，并且该数组的长度是10，也就是在该数组中最多只能存放十个元素。

	数组中元素的访问：
		索引：访问数组中每个元素的方式，用于表示该元素在数组中的位置，索引通常从0开始，步长为1，
		            索引的最大值是数组的长度减1。

		赋值：
			语法：数组名[索引]=值;
		取值：
			语法：数据类型 变量名=数组名 [索引];

		例子：创建一个长度为10的int类型的数组，给数组中的每一个元素赋值（任意值），然后打印该数组中每个元素
		            的值。

	数组中元素的默认值：
		当创建一个数组之后，在没有显式赋值之前，该数组中的元素具有默认值：
			int、short、byte、long：0
			float、double：0.0
			char：'\u0000'
			boolean：false
			引用类型：null

	数组的另外一种定义方式：静态初始化。
		语法：数据类型[] 数组名=new 数据类型[]{[E1,...,EN]};

		例子：int[] nums=new int[]{12,32,21,0,9};
	     	  int nums[]=new int[]{12,32,21,0,9};
		说明：声明了一个int类型的数组叫nums，然后初始化之后并给每一个元素赋值，该数组的长度是5。

	引用数据类型的数组：
		class Student{}

		Student[] stus=new Student[5];
		Student stu1=new Student();
		Student stu2=new Student();
		Student stu3=new Student();
		Student stu4=new Student();
		Student stu5=new Student();

		stus[0]=stu1;
		stus[1]=stu2;
		stus[2]=stu3;
		stus[3]=stu4;
		stus[4]=stu5;

		  画内存图。
		  二维数组：数组的元素是一维数组。
		声明：
			int[][] numss=new int[3][2];

			int[][] numss=new int[3][];
			numss[0]=new int[4];
			numss[1]=new int[5];
			numss[2]=new int[6];
			只声明了二维数组的长度，没有声明该二维数组的元素（一维数组）的长度。
			以上数组的声明不能直接使用，在使用之前需要对该二维数组的每一个元素进行初始化，才能使用。

			int[][] numss=new int[][]; // error
			int[][] numss=new int[][]{}; // error

			int[][] numss=new int[][]{{1,2},{1,2,3},{3,4}};

		二维数组的使用：
			赋值：
				int[][] numss=new int[3][2];
				numss[0][0]=10;

			取值：
				int[] nums=numss[0];
				int num=numss[0][1];

	数组的边界：数组的索引的取值范围。
		int[] nums=new int[10];
		数组的长度：int len=nums.length;
		数组的索引：int indexMin=0;int indexMax=nums.length-1;
			数组的length属性是不可更改的，也就是nums.length=20;是错误的。

		如何更改数组的长度(数组的扩容)：由于数组的属性length是不可更改的，所以只能重新创建数组对象，
		重新设置长度。
			int[] nums=new int[5];
			nums[0]=100;
			nums[1]=200;
			nums[2]=300;
			nums[3]=400;
			nums[4]=500;

			int[] temp=new int[6];
			temp[0]=nums[0];
			temp[1]=nums[1];
			temp[2]=nums[2];
			temp[3]=nums[3];
			temp[4]=nums[4];
			temp[5]=600;

		数组的遍历：使用循环来获取数组中的每一个元素。
			if(temp.length<=nums.length) syso("数组长度不够！");

			for(int x=0;x<nums.length;x++){
				temp[x]=nums[x];
			}

			temp[temp.length-1]=600;

			nums=temp;

			temp=null;
	数组的练习：
		计算int类型数组中元素的最大值，最小值，平均值。
			TestArray1.java
		思路：写成工具功能，将需要计算的数组以参数的形式传递给方法，在方法中计算数组中最值和平均值。
			int sum=0;

			for(int x=0;x<nums.length;x++){
				sum+=nums[x];
			}

			return sum/nums.length;

	排序：
		冒泡排序：
			让元素和气泡一样，根据大小顺序一个一个的呈现出来。
			让两个相邻的元素做比较，如果符合条件，调换两个元素的位置。
			使用双重循环，外层循环用于控制比较的次数，内层循环用于控制两个元素的比较过程。

			int[] nums={8,6,9,1,7,5,2,4,3,0};

			for(int x=0;x<nums.length;x++){
				for(int z=0;z<nums.length-(1+x);z++){
					if(nums[z]>nums[z+1]){
						int temp=nums[z];
						nums[z]=nums[z+1];
						nums[z+1]=temp;
					}	
				}
			}
选择排序：选择某一个位置的元素，让该元素和其他所有的元素比较，如果左边比右边大，换位。需要双重循环，外层控制比较的次数，内层循环控制两个元素的比较过程。
			java.util.Arrays;
			int[] nums={8,6,4,9,0,1,5,7,2,3};
			System.out.println("原始数组："+Arrays.toString(nums));
			for(int x=0;x<nums.length-1;x++){
				for(int z=x+1;z<nums.length;z++){
					if(nums[x]>nums[z]){
						nums[x]^=nums[z];
						nums[z]^=nums[x];
						nums[x]^=nums[z];
					}
				}
			}

		插入排序：
		希尔排序：速度最快。
		快速排序：

	随机获取数组中的元素：生成验证码。从数组中随机去除四个元素，拼接成字符串。
	如何生成随机数：在java.math包中有Math类，randmon方法可以生成[0,1)的随机数，该随机数是浮点数。
		char[] cs={'a','b','c','d','e','0','1','2','3','4','5'};

		过程分析：
		double rdm=Math.random();
		rdm							[0,1)	
		(int)(rdm*cs.length)		[0,cs.length-1]
		int index=(int)(rdm*cs.length);

		代码实现：
		String result="";
		for(int x=0;x<4;x++){
			double rdm=Math.random();
			int index=(int)(rdm*cs.length);
			result+=cs[index];
		}

		for(int x=0;x<4;x++)
			result+=cs[(int)(Math.random()*cs.length)];

4.可变长参数列表
	指的是方法的参数的个数是不固定的，在方法体中，需要根据参数的个数做出相应的操作，此时可以将参数定义为可变长参数列表，符号“...”
		例如：public void printArray(int... arr){}   // 最常见
		例如：public void printArray(int ... arr){}
		例如：public void printArray(int...arr){}
			  public static void main(String... args){}

	可变长参数列表本身是一个数组。

	public static void printArray(int[] arr){
		syso("[");
		for(x){
			syso(arr[x]);
		}
		syso("]")
	}

	int[] nums=new int[]{1,2,3,4};
	printArray(nums);


	printArray(1,2,3,4,5,6);

	public void printArray(int... arr){
		syso("[");
		for(x){
			syso(arr[x]);
		}
		syso("]")
	}

	void show(int x,string n,double d){}

	可变长参数列表必须放在方法的最后一个参数的位置。
	在一个方法的参数中不可能存在两个可变长参数列表。

	void add(int... nums){
		int sum=0;
		for(x){
			sum+=nums[x];
		}
	}

	void add(int[] nums,String name){}
	int[] nums=new int[]{1,2,3};
	add(nums,"Kevin");

	void add(int... nums,String name){}
	add(nums,"Kevin");
	add(1,2,3,4,54,5,6,7,"Kevin");

	void add(String name,int... nums){}

	void add(int... nums)



