 。吗 第二章：标识符、关键字、数据类型
目标：
	1.注释
	2.标识符
	3.关键字
	4.基本数据类型
	5.不同数据类型的字面值
	6.类、对象、成员变量和引用变量的定义
	7.类的声明
	8.类变量
	9.创建实例/对象
	10.默认值
	11.描述引用变量

1.注释
	注释是在Java代码中用来标注或者说明代码的含义，JVM不会对注释进行编译和执行，注释是给编程人员看的。

	注释的分类：
		单行注释：
			该注释只能在一行代码的末尾使用。
			该注释的体现是使用“// 注释内容”表示。
			单行注释可以嵌套使用，但是没有意义。
		多行注释：
			多行注释指的是可以使用Java代码中连续的多个行来书写注释。
			语法：
				/* 
				 *	注释内容
				 *	注释内容
				 */
				
				/* 注释内容  */
			
			多行注释不能嵌套使用。

		文档注释：
			文档注释是Java语言特有的一种注释，主要是使用javadoc命令来生成相应的API文档的。
			不可以在关键字中间注释       cla/* 2222*/ss  会导致关键字无法识别

			语法：
				/**
				 * 注释内容
				 * 注释内容
				 */
			
			文档注释不能嵌套使用。 起始符会识别最近的一个终止符

		单行注释和多行注释是给编程人员看的，而文档注释是通过javadoc命令生成的程序的使用说明书，是给用户看的。

2.分号，代码块，空格
	a.代码块：指的是包含在“{}”中的所有内容称之为代码块，也称之为代码域。

	b.在Java代码中，任意一行都需要加“;”，但是代码块起始符和结束符后面的“;”可以省略。

	c.代码中的空白指的是：空格，制表符，换行。

3.关键字：
	关键字指的是在Java代码中具有特殊含义的单词，在Java代码中不能他用。
		class,public,void,import,static,pakcage

	保留字：
		保留字也是关键字，在目前所有的JDK版本中暂时没有使用，但是不确定以后会不会有用，所以暂时保留下来。
		goto，const。 
		size0f  friendiy  C++关键字

	练习：请选出下面的单词中不是关键字的单词（A）。//关键字区分大小写。
	      A. Public B. void  C. goto D. true
4.标识符：
	命名规则：
	  类名：如果由一个单词构成，首字母大写。
		  如果由多个单词构成，每个单词的首字母都大写。
		  public class Student{}
		  public class StudentInformation{}

	方法名：如果由一个单词构成，则该单词全部小写。
			如果由多个单词构成，第一个单词全部小写，从第二个单词开始，每个单词的首字母大写。
			public void show(){}
			public void showStudentInformation(){}

	变量名：和方法名规则完全相同。
			int age=10;
			boolean isSuccessed=true;

	常量名：不管由几个单词构成，全部大写，每个单词之间以“_”分割。
			public static final int SESSION=1000;
			public static final int SESSIONT_IME_OUT=5000;

	标识符指的是：类、方法、变量和常量的名字。
	标识符可以以字母、“_”和“$”开始，之后的内容可以是除了特殊符号以外的其他字符，
	但是不能以数字和其他特殊符号开始，标识符中也不能包含特殊符号。
	
	标识符可以是中文。
		int a1b2c=10;
		int _1a2b3c=10;
		int $1a2b3c=10;
	标识符严格区分大小写。
	标识符没有长度限制。
	标识符尽量做到见名知义。

5.Java中的八个基本数据类型
	boolean：布尔类型，值：true和flase。占1个字节。
	byte：占1个字节的整数。		-128~+127
	short：短整型，占2个字节。	-2^15~+2^15-1
	char：字符型，占2个字节。
	int：整型，占4个字节。		-2^31~+2^31-1     Java中默认的类型
	float：浮点型，占4个字节。  
	long：长整型，占8个字节。	-2^63~+2^63-1
	double：双精度浮点型，占8个字节。                 Java中默认浮点型
	有符号数：将第一个数定义为符号数，1为负 0为正

	占N个bit的取值范围：
	有符号：-2^(N-1)~2^(N-1)-1
	无符号：0~2^N-1
	Java中的基本数据类型，8中：
	按照占用字节大小：
		1：byte、boolean
		2：short、char
		4：int、float
		8：long、double

	按照具体的数据类型：
		布尔型：boolean
		字符型：char
		浮点型：float、double
		整  型：byte、short、int、long

	有符号的数：
		将一个二进制数的最高位定义为符号位，1为负，0为正。
	byte：	-2^7~2^7-1		byte b=10;   byte b=128;
		0111-1111
		0000-0000
		1111-1111

	short：	-2^15~2^15-1	short s=10;
	int：	-2^31~2^31-1  是Java中默认的整数类型。 int i=10;
	long：	-2^63~2^63-1	
		long l=10; 
		long l=999999999999999;
		long l=999999999999999L;
	
	char：
		char c='a';
		char c=' ';
		char c=97;

	转义符：“\”，转移符个其他字符组合，改变原有字符的含义。作用于字符或者字符串。

	\t：制表符  Tab
	\n：换行符  NewLine
	\r：回车符	Return
		不同的操作系统，换行符不同，在Linux中，换行符是\n，在Windows中，换行符是\r，在Unix中换行符\r\n。
		
		char c='\t';
		char c='\n';
		char c='\r';
		char c='\\';

	字符串：由多个字符组成的串。
		String s="abc\t";


	a.布尔类型：字面量只有true和false。不会像C语言中使用0或者非0的值去表示。
		boolean a=true;
		boolean b=false;

	b.字符型和字符串
		一个字符占2个字节，在计算机中存储是由一个无符号的16位的整数存储的。
		字符在代码中的表示是使用单引号引起来。并且在该单引号中只能出现一个字符，不能出现多个。
			char c='a';
			char c=97;   // 表示该字符在ASCII编码中的字符编号
			char c='a';
			char c='b';
			char c='+';
			char c='.';

		字符串：String s="Hello World!";

		字符编码：将字符使用一串特定的二进制数值表示，也称之为字符集（Character Set）。
		
		常见的编码：1
			ASCII字符编码：用1个字节的7位来表示，最多能表示128个字符，主要用于表示现代英语和其他西欧字符。
			1个字符占1个字节。

			ISO-8859-1字符编码：又称Latin-1，拉丁1编码。用1个字节的8位来表示，兼容于ASCII码，最多能表示256个字符。
			1个字符占1个字节。

			GB2312字符编码：国标码，与ASCII码兼容。
			GBK字符编码：国标扩展码，与GB2312字符编码兼容。

			Unicode字符编码：
				UCS：Universal Character Set
				用2个字节(16位)编码，被称为UCS-2, Java语言采用;
				用4个字节(32位)编码，被称为UCS-4;

			练习：'a'在Java中占用几个字节？2个。

			UTF字符编码：有些操作系统不完全支持16位或32位的Unicode字符编码，
			UTF(UCS Transformation Format)字符编码能够把Unicode字符编码转换为操作系统支持的编码，
			常见的UTF字符编码包括UTF-8, UTF-7和UTF-16。

		字符串：String类。
			String是一个类，不是基本数据类型，叫类类型，或者叫引用类型。
			字符串是包含在一对双引号内的任意多个字符。

	c.整数类型：
		整数数据类型：byte(1)、short(2)、int(4)、long(8)。

		整数类型的四种表示方式：
		二进制：逢2进1。0和1.

		十进制：逢10进1。0到9.在代码中直接写数字就是表示十进制。
			int num=99;

		八进制：逢8进1。0到7.在代码中的数字以0开头表示八进制。
			int num=0143;

		十六进制：逢10进1。0到9和A到F。在代码中，以0x开头表示。
			int num=0x10;
			int num=0xAF;
			int num=0xF;

		在Java中，默认整数类型是int。
			byte b=10;
		上面的代码其实在JVM中进行了两步：
			1.先将10赋值给一个int变量：
				int temp=10;
			2.判断该值是否超过了byte的范围，如果没有超过，直接将值赋值给b；如果超过了，报错。
				byte b=(byte)10;

			byte b=10; byte b=127;
			int i=10; int i=100; int num=2^31-1;
			short s=10; short s=2^15-1;
			long l=10; long l=100L;
		问题1：为什么会有四种整数类型？
			数据存储时对于磁盘空间占用。
			1
			0000-0001       1	8
			0000-0000 0000-0000 0000-0000 0000-0001  4 32

		问题2：为什么要有不同的进制？
			方便于做数据之间的计算。
			进制的转换：
			二进制、八进制、十进制、十六进制

			1.十进制转二进制：除2取余，余数倒排。
			2.二进制转十进制：从右到左按二进制位依次从0编号，用二进制位为1的位的值乘以2的该位的编号次方，最后相加。

			3.二进制转八进制：按二进制位从右往左，按每三个二进制位为一组，不够三位则在最前面补0，先转成十进制，然后拼接。
			4.二进制转十六进制：按二进制位从右往左，按每四个二进制位为一组，先转成十进制，然后拼接。

			5.十进制转八进制：先转二进制，再转八进制。
			6.十进制转十六进制：先转二进制，再转十六进制。

			7.八进制转二进制：把八进制的每一位转成3位二进制数，最后拼接。
			8.十六进制转二进制：把十六进制的每一位转成4位二进制数，最后拼接。

		数据在计算机中的存储：是以补码的形式存储的。
			负数
			原码：将一个整数转化成二进制，就是该数的原码。

			反码：将原码的二进制数按位取反。
			补码：在反码的基础上加1，形成补码。
			
			正数中原码，反码和补码都相同。

	d.浮点数
		float：	4个字节、32位。
		double：8个字节、64位。是Java中默认的浮点数据类型。

		float f=1.0F;
		double d=1.0;


	e.基本数据类型转换：
		整数：byte、short、init、long
		小数：float、double

		byte b=10;
		int i=20;

		int i1=b;
		byte b1=(byte)i;

		自动转换：小转大。
		byte->int
		正数：在补码的基础上前面补0；
		负数：在补码的基础上前面补1；

		强制转换：大转小。
		强制转换是砍掉高位，保留低位。
		变量和常量：
常量：值固定不变的量是常量。
	整数常量：所有的整数。
	小数常量：所有的小数。
	字符常量：所有的字符。
	字符串常量：所有的字符串。
	布尔型常量：true和false。
	空值常量：null

	在Java代码中体现常量：
		final int I=10;
		常量只能初始化赋值，不能重新赋值。

变量：是JVM管理的一片内存空间，该空间的值可以改变。
	变量三要素：数据类型、变量名、变量值。

	声明变量并初始化：
		int i=10;
			i=12;  // 重新赋值

	声明变量不做初始化：
		int i;      // 只是声明变量。
			i=10;   // 变量初始化
			i=12;	// 重新赋值

	变量的使用：
		int a=10;  // 声明变量a并初始化为10，数据类型是int
		int b;     // 只是声明变量b，未做初始化。
		b=a+10;    // 使用了变量a，然后给变量b初始化。
		a++;
		b++;
		++a;
		++b;
		--a;
		a--;
		a+=10;    // 都是在使用变量。

理解类和对象：
	类：对具有相同属性(特征)和行为的一系列个体的抽象描述。
	对象：某一类事物中的具体的个体。
		1.万物皆对象
		2.在大多数情况下，类和对象是用名词来描述的。
		3.类具有全局属性(Attribute，全局变量，成员变量)和局部属性(Properties，局部变量)。
		4.对象主要是用来操作成员变量或者局部变量的数据的。
		5.对象是唯一的，世界不存在两个一模一样的对象。
		6.对象具有状态：对象的状态指的是在某个瞬间该对象所具有的属性的值。
		7.同一个类的所有对象(实例)都具有相同的属性，但是属性值不一定相同；并且都具有相同的行为，但是执行该行为的具体操作并不一定相同。

	创建类的对象：
		类(数据类型) 对象名(变量名)=new 类();
		类 对象名=new 类([参数(s)]);

	对象的属性（成员变量）赋值：
		对象名.属性名=属性值;

	对象的方法的调用（类的行为的执行）：
		对象名.方法名([参数(s)]);

	引用数据类型：接口类型，类类型，数组类型。

	类类型：在内存中的某一片区域中只能存放某个类的对象这种数据，则称该变量的数据类型为某个类类型。
	
	类的行为：在Java代码中指的是方法。
	
	[权限修饰符] 返回值类型 方法名(){
		// 该方法的具体操作
		// 方法体
	}

全局变量（成员变量，Attribute，Field）：定义在类中的变量称之为全局变量；作用域是整个类中的所有方法都能操作。每个对象都拥有该变量，但是变量的值不一定相同。
	全局变量在声明之后不做初始化的情况下具有默认值：
		byre,short,int,long : 0
		float,double : 0.0
		char : null
		boolean : false
		类型型：null

	class Person{
		String name;   //定义成员变量 
		int age;

		void fun1(){
			name="Kevin";
		}
		void fun2(){
			age=10;
		}
	}

局部变量（Properties，Variable）：
	除了全局变量之外的包含在代码块中的变量称之为局部变量。
	局部变量是方法中和除了类之外的其他代码块中声明的变量称之为局部变量。
	局部变量的作用域该变量所在的代码块中的所有代码都能访问和操作。
	
	class Person{
		// 成员变量，全局变量
		int num;

		void say(){
			// 局部变量
			int num=10;
			System.out.println(num);
		}

		void talk(){
			num=20;   //调用成员变量
		}
	}

	所有的变量在使用该变量的时候，该变量必须要有值；而全局变量只声名不做初始化可以被使用，因为全局变量有默认值。而局部变量声明之后在使用之前必须赋初始值，因为局部变量没有默认值。

	变量的生命周期：
		全局变量：该变量的所属对象在内存中消失，该变量的生命也随之结束。
		局部变量：该变量所在的代码块运行结束，该变量的生命也随之结束。

	基本数据类型和引用数据类型的不同：

		int x=10;
		int y=x;

			x=20;
			y=?
			 ：y=10

		class Student{
			int age;
		}

		Student s1=new Student();
		Student s2=s1;

		s1.age=100;
		s2.age=?
		    ：s2.age=100                                                                                                                                                 